Ce projet sert a mettre en avant ce qu'un serveur comme apache fait a notre place. 
Ici je crÃ©e le serveur donc je dois tout faire. Par exemple avec l'utilisation d'apache on peut melanger le html et le php. 
Ici ce n'est pas possible mon servuer n'est pas assez puissant. La gestion des erreurs (400, 200...) des headers des routes... se fait manuellement ici

fichier dev_server.py :
Script Python qui surveille ton fichier et relance ton serveur Ã  chaque modification.

fichier serveur.py:

Etape 1 : CrÃ©ation du serveur

Etape 2 : CrÃ©ation des routes 

Etape 3 : Formulaire de contact

le protocole HTTP impose que lorsquâ€™un serveur reÃ§oit une requÃªte (GET, POST, etc.), il doit toujours rÃ©pondre avec :

Un code de statut (200 OK, 404 Not Found, 500 Internal Server Error, â€¦).
ğŸ‘‰ Câ€™est self.send_response(200) qui envoie Ã§a.

Des en-tÃªtes HTTP (Content-Type, Content-Length, etc.).
ğŸ‘‰ Câ€™est self.send_header(...) suivi de self.end_headers() qui terminent la section en-tÃªtes.

Un corps de rÃ©ponse (optionnel, mais recommandÃ©).
ğŸ‘‰ Câ€™est self.wfile.write(...).
Quand tu fais un POST, le navigateur envoie les donnÃ©es (ton prÃ©nom, nom, message) dans le corps de la requÃªte.

âœ… Tu as crÃ©Ã© ton formulaire HTML (/contact).

âœ… Ton serveur reÃ§oit bien les requÃªtes POST (Ã§a nâ€™affiche plus dâ€™erreur).

âœ… On sait lire les donnÃ©es envoyÃ©es depuis le navigateur (avec self.rfile.read(...)).

âœ… parser les donnÃ©es pour les sÃ©parer






RAPPELS PYTHON

Les tuples ressemblent aux listes, mais on ne peut pas les modifier une fois quâ€™ils ont Ã©tÃ© crÃ©Ã©s.
Le f devant les triples guillemets lorsqu'on ecrit du HTML au sein du python permet lâ€™interpolation des variables.

